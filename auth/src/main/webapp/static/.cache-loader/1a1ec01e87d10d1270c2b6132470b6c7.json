{"remainingRequest":"/Users/lee/work/project/autocar/auth/src/main/webapp/static/node_modules/babel-loader/lib/index.js!/Users/lee/work/project/autocar/auth/src/main/webapp/static/node_modules/eslint-loader/index.js??ref--5-0!/Users/lee/work/project/autocar/auth/src/main/webapp/static/app/component/ajax/actions.jsx","dependencies":[{"path":"/Users/lee/work/project/autocar/auth/src/main/webapp/static/app/component/ajax/actions.jsx","mtime":1524192327584},{"path":"/Users/lee/work/project/autocar/auth/src/main/webapp/static/.babelrc","mtime":1524029919673},{"path":"/Users/lee/work/project/autocar/auth/src/main/webapp/static/node_modules/cache-loader/dist/cjs.js","mtime":1524124642740},{"path":"/Users/lee/work/project/autocar/auth/src/main/webapp/static/node_modules/babel-loader/lib/index.js","mtime":1520329890000},{"path":"/Users/lee/work/project/autocar/auth/src/main/webapp/static/node_modules/eslint-loader/index.js","mtime":1519638534000}],"contextDependencies":[],"result":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.RECEIVE_POSTS = exports.REQUEST_POSTS = exports.INVALIDDATE_SUBREDDIT = exports.SELECT_SUBREDDIT = undefined;\nexports.fetchPosts = fetchPosts;\nexports.fetchPostsIfNeeded = fetchPostsIfNeeded;\n\nvar _isomorphicFetch = require('isomorphic-fetch');\n\nvar _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);\n\nrequire('babel-polyfill');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SELECT_SUBREDDIT = exports.SELECT_SUBREDDIT = 'SELECT_SUBREDDIT';\n\nvar INVALIDDATE_SUBREDDIT = exports.INVALIDDATE_SUBREDDIT = 'INVALIDDATE_SUBREDDIT';\n\nvar REQUEST_POSTS = exports.REQUEST_POSTS = 'REQUEST_POSTS';\n\nfunction requestPosts(subreddit) {\n    return {\n        type: REQUEST_POSTS,\n        subreddit: subreddit\n    };\n}\n\nvar RECEIVE_POSTS = exports.RECEIVE_POSTS = 'RECEIVE_POSTS';\nfunction receivePosts(subreddit, json) {\n    return {\n        type: RECEIVE_POSTS,\n        subreddit: subreddit,\n        posts: json.data.children.map(function (child) {\n            return child.data;\n        }),\n        receiveAt: Date.now()\n    };\n}\n\n//export function fetchPosts(subreddit) {\n//\n//    return function (dispatch) {\n//        dispatch(requestPosts(subreddit))\n//\n//        return fetch(`htt://www.subreddit.com/r/${subreddit}.json`)\n//            .then(response => response.json())\n//            .then(json=>dispatch(receivePosts(subreddit, json)))\n//    }\n//}\n\nfunction fetchPosts(subreddit) {\n\n    return function (dispatch) {\n        dispatch(requestPosts(subreddit));\n\n        return (0, _isomorphicFetch2.default)('htt://www.subreddit.com/r/' + subreddit + '.json').then(function (response) {\n            return response.json();\n        }).then(function (json) {\n            return dispatch(receivePosts(subreddit, json));\n        });\n    };\n}\n\nfunction shouldFetchPosts(state, subreddit) {\n    var posts = state.postsBySubreddit[subreddit];\n    if (!posts) {\n        return true;\n    } else if (posts.isFetching) {\n        return false;\n    } else {\n        return posts.didInvalidate;\n    }\n}\n\nfunction fetchPostsIfNeeded(subreddit) {\n    return function (dispatch, getState) {\n        if (shouldFetchPosts(getState(), subreddit)) {\n            return dispatch(fetchPosts(subreddit));\n        } else {\n            return Promise.resolve();\n        }\n    };\n}",null]}